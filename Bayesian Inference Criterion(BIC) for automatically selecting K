import matplotlib.pyplot as plt
from random import *
from statistics import mean
import numpy as np
import math
import matplotlib.mlab as mlab
import pylab as P

def twoDimGau(x, mean, sigma,dd):
    #print(sigma)

    cc = np.linalg.det(sigma)
    c = math.sqrt(1/(( (2 * math.pi)**dd ) * cc))
    temp1 = x - mean
    temp2 = np.matmul(temp1, np.linalg.inv(sigma))
    temp3 = np.matmul( temp2, np.transpose(temp1) )
    res = c * math.exp( - 0.5 * temp3)
    return res

def calloglikelihood(data, alpha, meanl, sigmal, num, valuek, dim):
    res = 0
    for i in range(num):
        temp = 0
        for k in range(valuek):
            temp = temp + alpha[k] * twoDimGau(data[i,:], meanl[k], sigmal[k], dim)
        res = res + math.log(temp)
    return res

def plot_gauss_parameters(mu, covar, colorstr, delta=.1):
    '''
    %PLOT_GAUSS:  plot_gauss_parameters(mu, covar,xaxis,yaxis,colorstr)
    %
    %  Python function to plot the covariance of a 2-dimensional Gaussian
    %  model as a "3-sigma" covariance ellipse
    %
    %  INPUTS:
    %   mu: the d-dimensional mean vector of a Gaussian model
    %   covar: d x d matrix: the d x d covariance matrix of a Gaussian model
    %   colorstr: string defining the color of the ellipse plotted (e.g., 'r')
    '''

    # make grid
    var1 = mu[0]
    var2 = mu[1]
    x = np.arange(mu[0] - 3.0 * np.sqrt(covar[0,0]), mu[0] + 3.0 * np.sqrt(covar[0,0]), delta)
    y = np.arange(mu[1] - 3.0 * np.sqrt(covar[1,1]), mu[1] + 3.0 * np.sqrt(covar[1,1]), delta)
    X, Y = np.meshgrid(x, y)

    # get pdf values
    Z = mlab.bivariate_normal(X, Y, np.sqrt(covar[0, 0]), np.sqrt(covar[1, 1]), mu[0], mu[1], sigmaxy=covar[0, 1])

    P.contour(X, Y, Z, colors=colorstr, linewidths=4)


###############################################################################
############################CHOOSE DATASET AND Kmax###########################
###############################################################################
dataset = 'dataset2'
datafilename = dataset + ".txt"
kmax = 5
###############################################################################
###############################################################################
###############################################################################
f = open(datafilename, "r")
data = f.read()
#print(data)
data1 = data.split('\n')
#print(data1)

xlist = []
ylist = []
for e in data1:
    temp = e.split(' ')
    while len(temp) > 2:
        temp.remove('')
    if len(temp) == 1:
        continue
    x = float(temp[0])
    y = float(temp[1])
    #print(temp, len(temp))
    xlist.append(float(x))
    ylist.append(float(y))

# plt.scatter(xlist, ylist, s=5)
# plt.show()

num = len(xlist)
dim = 2
data = np.zeros((num,dim))
for i in range(num):
    data[i,0] = xlist[i]
    data[i,1] = ylist[i]

# for i in range(num):
#     onerow = []
#     for j in range(valuek):
#         onerow.append(randint(1,10))
#     summ = sum(onerow)
#     for p in range(len(onerow)):
#         wmatrix[i,p] = onerow[p]/summ

biclist = []
maxlllist = []

for kk in range(kmax):
    valuek = kk+1#kk + 1


    ###########  INITIALIZE WEIGHTS
    wmatrix = np.zeros((num,valuek)) # N x K
    alpha = np.zeros(valuek)
    listt = []
    for q in range(valuek):
        listt.append(float(randint(1,10)))
    summ = sum(listt)
    for i in range(len(listt)):
        temp = listt[i]/summ
        alpha[i] = temp



    times = 500
    timelist = range(times)
    likelihood_list = []

    meanlist = []
    sigmalist = []
    for k in range(valuek):
        rn = randint(1,num)
        meanlist.append(data[rn,:])
        sigmalist.append(np.cov(np.transpose(data)))
        #print(type(np.cov(np.transpose(data))))

    for ind in range(times):
        print('###############','k=',valuek, 'iteration=', ind)
        #print(meanlist)
        ## E-STEP


        for i in range(num):
            templist = np.zeros([1, valuek], dtype=float)
            for k in range(valuek):
                templist[0,k] = alpha[k] * twoDimGau(data[i, :], meanlist[k], sigmalist[k], dim)
            wmatrix[i, :] = templist/np.sum(templist)
            # for k in range(valuek):
            #     #denom = 0
            #     #nomin = alpha[k] * twoDimGau(data[i,:], meanlist[k], sigmalist[k], dim)
            #     wmatrix[i,k] = templist[k] / sum(templist)

        ## M-step
        Nk = sum(wmatrix)
        alpha = Nk/num

        meanlist = []
        sigmalist = []
        for k in range(valuek):
            #temp = np.zeros((1,dim))
            # for i in range(num):
            #     temp = temp + wmatrix[i,k] * data[i,:]

            # print(wmatrix[:, k].reshape(num,1).shape)
            # print(wmatrix[:, k].reshape(num,1))

            temp = sum(wmatrix[:, k].reshape(num,1) * data)     ###############???????????????????????????????????????????????
            meanlist.append( temp / Nk[k])

        for k in range(valuek):

            tempsigma = np.zeros((dim, dim))

            for i in range(num):
                tempsigma = tempsigma + wmatrix[i,k] * np.matmul(np.transpose( data[i,:] - meanlist[k] ), data[i,:] - meanlist[k])
            sigmalist.append(tempsigma / Nk[k])

        likelihood = calloglikelihood(data, alpha, meanlist, sigmalist, num, valuek, dim)
        print(likelihood)
        likelihood_list.append(likelihood)


    # P.scatter(data[:,0], data[:,1], s=20, c='b', marker='.', alpha=.65, linewidths=2)
    # colorstr = ['r', 'g', 'c', 'y']
    # for k in range(valuek):
    #     plot_gauss_parameters(meanlist[k][0], sigmalist[k], colorstr[k], delta=0.1)
    # P.show()
    #
    # plt.plot(timelist, likelihood_list, '--', linewidth=3)
    # plt.show()

    maxlllist.append(likelihood_list[len(likelihood_list) - 1])
    bicvalue = likelihood_list[len(likelihood_list) - 1] - 0.5 * math.log(num) * (valuek - 1 + valuek * (dim + dim*(1+dim)/2.0))
    biclist.append(bicvalue)

print('likelihood list',maxlllist)
print('biclist',biclist)
print('index of max value is', biclist.index(max(biclist)))

krange = [1,2,3,4,5]
plt.plot(krange, maxlllist, '-.', linewidth=3)
plt.title('Algorithm 3: log-likelihood for ' + dataset)
plt.ylabel('log-likelihood')
plt.xlabel('k')
plt.show()

plt.plot(krange, biclist, '-.', linewidth=3)
plt.title('Algorithm 3: BIC scores for ' + dataset)
plt.ylabel('BIC scores')
plt.xlabel('k')
plt.show()
